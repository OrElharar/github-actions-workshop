# This workflow demonstrates how to deploy a project to a server.
# It is an example for an artifact upload and download, job outputs, and dependency caching.

# What is an artifact?
# An artifact is a file or collection of files produced during a workflow run.
# You can use artifacts to pass data between jobs in a workflow or persist data after a workflow run has ended.

# What is a job output?
# A job output is a value that a job in a workflow produces,
# which you can use in the downstream jobs in the same workflow.
# You can use job outputs to pass data between jobs in a workflow or persist data after a workflow run has ended.

#What is Dependency Cashing?
# Dependency caching is a feature that allows you to store dependencies on the runner,
# which persists across workflow runs and can dramatically improve workflow execution time.
# Dependency caching is supported for npm, yarn, and pip dependencies.

name: Section 5 - Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cash dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: cd ./section-5-demo && npm ci
      - name: Lint code
        run: cd ./section-5-demo && npm run lint
      - name: Test code
        run: cd ./section-5-demo && npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-filename: ${{ steps.publish-js-filename.outputs.script-filename }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cash dependencies
        uses: actions/cache@v3
        with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: cd ./section-5-demo && npm ci
      - name: Build website
        run: cd ./section-5-demo && npm run build
      - name: Publish JS filename
        id: publish-js-filename
        run: find section-5-demo/dist/assets/*.js -type f -execdir echo 'script-filename={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: |
            ./section-5-demo/dist
#         this way it is possible to provided multiple paths, else it would be:
#         path: ./section-5-demo/dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output Contents
        run: ls
      - name: Output filename
        run: echo ${{ needs.build.outputs.script-filename }}
      - name: Deploy
        run: echo "Deploying..."
